From bf4e493de44a3eb529f94ad00c1b4800ff03d839 Mon Sep 17 00:00:00 2001
From: Tristan Cacqueray <tdecacqu@redhat.com>
Date: Mon, 17 Dec 2018 05:01:17 +0000
Subject: [PATCH] wip: add notmuch-progressive-search custom

This change updates the process-filter function to send a SIGSTOP
signal to the notmuch-search process when the window is close to
the end of the buffer. Then a scroll-functions is used to send a
SIGCONT signal when the window reaches the end of the buffer.

This change also adds a notmuch-flush-buffer function to read the
whole search process outputs.

This change also ignore the SIGCHLD handler for the notmuch-search
process to properly reap gpg child process.
---
 emacs/notmuch.el | 120 ++++++++++++++++++++++++++++++++++++++++++++++-
 1 file changed, 118 insertions(+), 2 deletions(-)

diff --git a/emacs/notmuch.el b/emacs/notmuch.el
index 83bcee57..cd3a937e 100644
--- a/emacs/notmuch.el
+++ b/emacs/notmuch.el
@@ -867,6 +867,99 @@ sets the :orig-tag property."
       (setq notmuch-search-target-thread "found")
       (goto-char pos))))
 
+(defcustom notmuch-progressive-search nil
+  "Enable progressive search.
+When set to non nil, notmuch-search process is paused until viewport
+reach the end of the buffer. Use the notmuch-flush-buffer to force
+read all the messages."
+  :type 'boolean
+  :group 'notmuch-search)
+
+(defvar notmuch--paused-procs nil
+  "The list of notmuch search buffer that are paused.")
+(defvar notmuch--procs-to-flush nil
+  "The list of notmuch search buffer the user requested to be flushed.")
+(defvar notmuch--search-gc-timer nil
+  "The buffer process garbage collector timer.")
+
+(defconst notmuch--search-stop-limit -16384
+  "The number of points between buffer and window to stop the search process.")
+(defconst notmuch--search-cont-limit 8192
+  "The number of points between window and buffer to cont the search process.")
+(defconst notmuch--search-process-ttl 3600
+  "The number of seconds before a paused search process is killed.")
+
+(defun notmuch--terminate (proc)
+  "Send sigterm to process group"
+  (message "DEBUG(term): Sending SIGTERM to %d (%s)" (process-id proc) (current-buffer))
+  (signal-process proc 15)
+  (notmuch--paused-procs-remove proc t)
+  (delete-process proc))
+
+(defun notmuch--paused-procs-gc ()
+  "Cleanup old paused processes and the one associated with killed buffers."
+  (message "DEBUG(gc): called at %s" (current-time-string))
+  (dolist (proc notmuch--paused-procs)
+    (let ((buffer (process-buffer proc)))
+      (message "DEBUG(gc): processing %S associated with %S (starttime %S)"
+               proc buffer (car (cdr (alist-get 'etime (process-attributes (process-id proc))))))
+      (unless (buffer-live-p buffer)
+        (message "DEBUG(gc): Deleting because buffer is killed")
+        (notmuch--terminate proc))
+      (if (member (process-status proc) '(run stop))
+          (unless (<= (car (cdr (alist-get 'etime (process-attributes (process-id proc)))))
+                      notmuch--search-process-ttl)
+            (message "DEBUG(gc): Deleting because process is too old")
+            (notmuch--terminate proc))
+        (message "DEBUG(gc): Deleting because process is dead")
+        (notmuch--paused-procs-remove proc nil))))
+  (dolist (proc notmuch--procs-to-flush)
+    (unless (process-live-p proc)
+        (setq notmuch--procs-to-flush (delete proc notmuch--procs-to-flush))))
+  (when (and (timerp notmuch--search-gc-timer)
+             (not notmuch--paused-procs)
+             (not notmuch--procs-to-flush))
+    (message "DEBUG(gc): removing the timer")
+    ;; Remove un-needed timer
+    (cancel-timer notmuch--search-gc-timer)))
+
+(defun notmuch--paused-procs-remove (proc resume)
+  "Remove PROC from the paused list and send SIGCONT when resume is t"
+  (when resume
+    ;; Send SIGCONT signal
+    (message "DEBUG(r): Sending SIGCONT to %d (%s)" (process-id proc) (current-buffer))
+    (signal-process proc 18))
+  (setq notmuch--paused-procs (delete proc notmuch--paused-procs))
+  (message "DEBUG(r) paused-procs are %S" notmuch--paused-procs)
+  (unless notmuch--paused-procs
+    ;; Remove un-needed scroll hook
+    (remove-hook 'window-scroll-functions 'notmuch--scroller)))
+
+(defun notmuch-flush-buffer ()
+  "Manually flush the search process stdout associated with the current buffer."
+  (interactive)
+  (let ((proc (get-buffer-process (current-buffer))))
+    (if (not (member proc notmuch--paused-procs))
+        (error "Notmuch search process is not paused")
+      (message "DEBUG(fb): Adding %S to the flush list for buffer %S" proc (current-buffer))
+      (add-to-list 'notmuch--procs-to-flush proc)
+      (notmuch--paused-procs-remove proc t)))
+  (message "DEBUG(fb): procs-to-flush are %S" notmuch--procs-to-flush))
+
+(defun notmuch--scroller (window window-start)
+  "Resume search process when WINDOW reaches the end of the buffer.
+
+This is added to the 'window-scroll-functions' when a search process is stopped.
+WINDOW-START unused."
+  ;; (message "DEBUG(s): scroller position %d (%s)"
+  ;;   (- (point-max) (window-end) notmuch--search-cont-limit) (current-buffer))
+  (when (<= (- (point-max) (window-end) notmuch--search-cont-limit) 0)
+    ;; Window is near the end of the buffer
+    (let ((proc (get-buffer-process (current-buffer))))
+      (when (and proc (member proc notmuch--paused-procs))
+        ;; Buffer is a stopped notmuch buffer
+        (notmuch--paused-procs-remove proc t)))))
+
 (defun notmuch-search-process-filter (proc string)
   "Process and filter the output of \"notmuch search\"."
   (let ((results-buf (process-buffer proc))
@@ -880,7 +973,27 @@ sets the :orig-tag property."
 	  (goto-char (point-max))
 	  (insert string))
 	(notmuch-sexp-parse-partial-list 'notmuch-search-append-result
-					 results-buf)))))
+					 results-buf))))
+
+  ;; (message "DEBUG(p): parser position %d" (- (window-end) (point-max) notmuch-search-stop-limit))
+  (if (and (equal notmuch-progressive-search t)              ; progressive search is turned on
+           (not (member proc notmuch--procs-to-flush))       ; proc isn't part of the flush list
+           (<= (- (window-end) (point-max)                   ; window is far from the end of buffer
+                  notmuch--search-stop-limit)
+               0))
+      (unless (member proc notmuch--paused-procs)
+        (unless notmuch--paused-procs
+            ;; First buffer to be stopped, add the scroll hook
+            (add-hook 'window-scroll-functions 'notmuch--scroller))
+        ;; Add to the paused list
+        (add-to-list 'notmuch--paused-procs proc)
+        ;; Send SIGSTOP signal
+        (message "DEBUG(p): Sending SIGSTOP to %d (%s))" (process-id proc) (current-buffer))
+        (signal-process proc 19)
+        (message "DEBUG(p): paused-procs are: %S" notmuch--paused-procs)
+        (unless (timerp notmuch--search-gc-timer)
+          ;; Ensure gc is started
+          (setq notmuch--search-gc-timer (run-at-time 60 60 #'notmuch--paused-procs-gc))))))
 
 (defun notmuch-search-tag-all (tag-changes)
   "Add/remove tags from all messages in current search buffer.
@@ -1000,6 +1113,7 @@ the configured default sort order."
     ;; existing search results buffer
     (unless (eq major-mode 'notmuch-search-mode)
       (notmuch-search-mode))
+    (notmuch--paused-procs-gc)
     ;; Don't track undo information for this buffer
     (set 'buffer-undo-list t)
     (set 'notmuch-search-query-string query)
@@ -1010,7 +1124,9 @@ the configured default sort order."
     (let ((proc (get-buffer-process (current-buffer)))
 	  (inhibit-read-only t))
       (when proc
-	(error "notmuch search process already running for query `%s'" query))
+        (if (not (member proc notmuch--paused-procs))
+            (error "notmuch search process already running for query `%s'" query)
+          (notmuch--terminate proc)))
       (erase-buffer)
       (goto-char (point-min))
       (save-excursion
-- 
2.30.0

